class Solution {
  public:
    struct Node *arrangeCV(Node *head) {
        if (!head || !head->next) return head; // If list is empty or has one element
        Node *vowelHead = nullptr, *vowelTail = nullptr;
        Node *consonantHead = nullptr, *consonantTail = nullptr;
        auto isVowel = [](char c) {
            return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';
        };
        Node* current = head;
        while (current) {
            if (isVowel(current->data)) {
                // Add to vowel list
                if (!vowelHead) {
                    vowelHead = vowelTail = current;
                } else {
                    vowelTail->next = current;
                    vowelTail = vowelTail->next;
                }
            } else {
                if (!consonantHead) {
                    consonantHead = consonantTail = current;
                } else {
                    consonantTail->next = current;
                    consonantTail = consonantTail->next;
                }
            }
            current = current->next;
        }
        if (vowelTail) {
            vowelTail->next = consonantHead;
        }
        if (consonantTail) {
            consonantTail->next = nullptr; }
        return vowelHead ? vowelHead : consonantHead;
    }
};
